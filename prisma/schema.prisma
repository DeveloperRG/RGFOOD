generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  imagePublicId String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  accounts              Account[]
  sessions              Session[]
  ownedFoodcourt        Foodcourt?           @relation("FoodcourtOwner")
  createdFoodcourts     Foodcourt[]          @relation("FoodcourtCreator")
  permissions           OwnerPermission[]
  updatedLogs           OrderLog[]
  createdTemplates      PermissionTemplate[]
  permissionChanges     PermissionHistory[]  @relation("ChangedBy")
  updatedDefaultPerms   DefaultPermission[]

  @@map("users")
}

model Foodcourt {
  id          String   @id @default(cuid())
  name        String
  description String?
  address     String
  image       String?
  imagePublicId String?
  category    CategoryType?
  isActive    Boolean  @default(true)
  status      FoodcourtStatus @default(BUKA)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId   String?
  owner     User?    @relation("FoodcourtOwner", fields: [ownerId], references: [id])
  creatorId String
  creator   User     @relation("FoodcourtCreator", fields: [creatorId], references: [id])

  menuItems          MenuItem[]
  orderItems         OrderItem[]
  ownerNotifications OwnerNotification[]
  ownerPermissions   OwnerPermission[]

  @@map("foodcourts")
  @@unique([ownerId])
}

model Table {
  id            String         @id @default(cuid())
  tableNumber   String         @unique
  capacity      Int
  qrCode        String         @unique
  isAvailable   Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orders        Order[]
  tableSessions TableSession[]

  @@map("tables")
}

model TableSession {
  id           String    @id @default(cuid())
  sessionStart DateTime  @default(now())
  sessionEnd   DateTime?
  isActive     Boolean   @default(true)
  tableId      String
  table        Table     @relation(fields: [tableId], references: [id])

  @@map("table_sessions")
}

model MenuItem {
  id            String        @id @default(cuid())
  name          String
  description   String?
  price         Decimal       @db.Decimal(10, 2)
  image         String?
  imagePublicId String?
  isAvailable   Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  foodcourtId   String
  categoryId    String?
  foodcourt     Foodcourt     @relation(fields: [foodcourtId], references: [id])
  orderItems    OrderItem[]

  @@map("menu_items")
}

model Order {
  id                 String              @id @default(cuid())
  customerName       String
  totalAmount        Decimal             @db.Decimal(10, 2)
  status             OrderStatus         @default(PENDING)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tableId            String
  table              Table               @relation(fields: [tableId], references: [id])
  orderItems         OrderItem[]
  orderLogs          OrderLog[]
  orderNotifications OrderNotification[]
  ownerNotifications OwnerNotification[]

  @@map("orders")
}

model OrderItem {
  id                  String      @id @default(cuid())
  quantity            Int
  unitPrice           Decimal     @db.Decimal(10, 2)
  subtotal            Decimal     @db.Decimal(10, 2)
  specialInstructions String?
  status              OrderStatus @default(PENDING)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  orderId             String
  foodcourtId         String
  menuItemId          String
  order               Order       @relation(fields: [orderId], references: [id])
  foodcourt           Foodcourt   @relation(fields: [foodcourtId], references: [id])
  menuItem            MenuItem    @relation(fields: [menuItemId], references: [id])
  orderLogs           OrderLog[]

  @@map("order_items")
}

model PermissionTemplate {
  id                String    @id @default(cuid())
  name              String    @unique
  description       String?
  canEditMenu       Boolean   @default(true)
  canViewOrders     Boolean   @default(true)
  canUpdateOrders   Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  createdById       String
  createdBy         User      @relation(fields: [createdById], references: [id])

  @@map("permission_templates")
}

model DefaultPermission {
  id                String    @id @default(cuid())
  canEditMenu       Boolean   @default(true)
  canViewOrders     Boolean   @default(true)
  canUpdateOrders   Boolean   @default(true)
  updatedAt         DateTime  @updatedAt
  updatedById       String
  updatedBy         User      @relation(fields: [updatedById], references: [id])

  @@map("default_permissions")
}

model OwnerPermission {
  id              String    @id @default(cuid())
  canEditMenu     Boolean   @default(true)
  canViewOrders   Boolean   @default(true)
  canUpdateOrders Boolean   @default(true)
  ownerId         String
  foodcourtId     String
  owner           User      @relation(fields: [ownerId], references: [id])
  foodcourt       Foodcourt @relation(fields: [foodcourtId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  history         PermissionHistory[]

  @@unique([ownerId, foodcourtId])
  @@map("owner_permissions")
}

model PermissionHistory {
  id                String    @id @default(cuid())
  permissionId      String
  previousSettings  Json      // Menyimpan state sebelumnya dalam format JSON
  newSettings       Json      // Menyimpan state baru dalam format JSON
  changedAt         DateTime  @default(now())
  changedById       String
  changedBy         User      @relation("ChangedBy", fields: [changedById], references: [id])
  permission        OwnerPermission @relation(fields: [permissionId], references: [id])

  @@map("permission_history")
}

model OrderLog {
  id             String       @id @default(cuid())
  previousStatus OrderStatus?
  newStatus      OrderStatus
  updatedAt      DateTime     @default(now())
  orderId        String
  orderItemId    String?
  updatedById    String
  order          Order        @relation(fields: [orderId], references: [id])
  orderItem      OrderItem?   @relation(fields: [orderItemId], references: [id])
  updatedBy      User         @relation(fields: [updatedById], references: [id])

  @@map("order_logs")
}

model OrderNotification {
  id          String   @id @default(cuid())
  message     String
  isDisplayed Boolean  @default(false)
  createdAt   DateTime @default(now())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])

  @@map("order_notifications")
}

model OwnerNotification {
  id          String    @id @default(cuid())
  message     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  foodcourtId String
  orderId     String
  foodcourt   Foodcourt @relation(fields: [foodcourtId], references: [id])
  order       Order     @relation(fields: [orderId], references: [id])

  @@map("owner_notifications")
}

enum UserRole {
  CUSTOMER
  OWNER
  ADMIN
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELED
}

enum CategoryType {
  MAKANAN_UTAMA
  MINUMAN
  CEMILAN
  MAKANAN_MANIS
}

enum FoodcourtStatus {
  BUKA
  TUTUP
}
