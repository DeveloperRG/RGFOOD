// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Auth.js Models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  refresh_token_expires_in Int?
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User model (combined with Auth.js)
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  
  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  
  // Application relations
  foodcourts    Foodcourt[]
  permissions   OwnerPermission[]
  updatedLogs   OrderLog[]
  
  @@map("users")
}

enum UserRole {
  CUSTOMER
  FOODCOURT_OWNER
  ADMIN
}

// Food Courts
model Foodcourt {
  id                  String    @id @default(cuid())
  name                String
  description         String?
  address             String
  logo                String?
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  owner               User      @relation(fields: [ownerId], references: [id])
  ownerId             String    @unique
  menuItems           MenuItem[]
  orderItems          OrderItem[]
  ownerPermissions    OwnerPermission[]
  ownerNotifications  OwnerNotification[]
  
  @@map("foodcourts")
}

// Tables in the common area
model Table {
  id              String    @id @default(cuid())
  tableNumber     String
  capacity        Int
  qrCode          String    @unique
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Tables belong to the platform, not to any specific foodcourt
  orders          Order[]
  tableSessions   TableSession[]
  
  @@unique([tableNumber])
  @@map("tables")
}

// Table Sessions
model TableSession {
  id              String    @id @default(cuid())
  sessionStart    DateTime  @default(now())
  sessionEnd      DateTime?
  isActive        Boolean   @default(true)
  
  // Relations
  table           Table     @relation(fields: [tableId], references: [id])
  tableId         String
  
  @@map("table_sessions")
}

// Menu Categories
model MenuCategory {
  id              String    @id @default(cuid())
  name            String
  description     String?
  displayOrder    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations - only keeping the relation with menuItems
  menuItems       MenuItem[]
  
  @@map("menu_categories")
}

// Menu Items
model MenuItem {
  id              String    @id @default(cuid())
  name            String
  description     String?
  price           Decimal   @db.Decimal(10, 2)
  imageUrl        String?
  isAvailable     Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  foodcourt       Foodcourt @relation(fields: [foodcourtId], references: [id])
  foodcourtId     String
  category        MenuCategory? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  orderItems      OrderItem[]
  
  @@map("menu_items")
}

// Orders Master Table
model Order {
  id                  String    @id @default(cuid())
  customerName        String
  totalAmount         Decimal   @db.Decimal(10, 2)
  status              OrderStatus @default(PENDING)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  table               Table     @relation(fields: [tableId], references: [id])
  tableId             String
  orderItems          OrderItem[]
  orderLogs           OrderLog[]
  orderNotifications  OrderNotification[]
  ownerNotifications  OwnerNotification[]
  
  @@map("orders")
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELED
}

// Order Items
model OrderItem {
  id                  String    @id @default(cuid())
  quantity            Int
  unitPrice           Decimal   @db.Decimal(10, 2)
  subtotal            Decimal   @db.Decimal(10, 2)
  specialInstructions String?
  status              OrderStatus @default(PENDING)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  // Relations
  order               Order     @relation(fields: [orderId], references: [id])
  orderId             String
  foodcourt           Foodcourt @relation(fields: [foodcourtId], references: [id])
  foodcourtId         String
  menuItem            MenuItem  @relation(fields: [menuItemId], references: [id])
  menuItemId          String
  orderLogs           OrderLog[]
  
  @@map("order_items")
}

// Foodcourt Owner Permissions
model OwnerPermission {
  id              String    @id @default(cuid())
  canEditMenu     Boolean   @default(true)
  canViewOrders   Boolean   @default(true)
  canUpdateOrders Boolean   @default(true)
  
  // Relations
  owner           User      @relation(fields: [ownerId], references: [id])
  ownerId         String
  foodcourt       Foodcourt @relation(fields: [foodcourtId], references: [id])
  foodcourtId     String
  
  @@unique([ownerId, foodcourtId])
  @@map("owner_permissions")
}

// Order History/Logs
model OrderLog {
  id              String    @id @default(cuid())
  previousStatus  OrderStatus?
  newStatus       OrderStatus
  updatedAt       DateTime  @default(now())
  
  // Relations
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String
  orderItem       OrderItem? @relation(fields: [orderItemId], references: [id])
  orderItemId     String?
  updatedBy       User      @relation(fields: [updatedById], references: [id])
  updatedById     String
  
  @@map("order_logs")
}

// Order Notifications (for displaying status updates to customers)
model OrderNotification {
  id              String    @id @default(cuid())
  message         String
  isDisplayed     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  // Relations
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String
  
  @@map("order_notifications")
}

// Foodcourt Owner Notifications
model OwnerNotification {
  id              String    @id @default(cuid())
  message         String
  isRead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  
  // Relations
  foodcourt       Foodcourt @relation(fields: [foodcourtId], references: [id])
  foodcourtId     String
  order           Order     @relation(fields: [orderId], references: [id])
  orderId         String
  
  @@map("owner_notifications")
}